package com.airlinemgmt.validations;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.airlinemgmt.DAO.CustomerDAO;
import com.airlinemgmt.beans.Journey;
import com.airlinemgmt.beans.Traveller;

public class Validations {

	public boolean verifySSN(String ssn) throws Exception {

		// Initialize reg expression for SSN.
		System.out.println(ssn);
		String expression = "^\\d{3}[- ]\\d{2}[- ]\\d{4}$";
		CharSequence inputStr = ssn;
		Pattern pattern = Pattern.compile(expression);
		Matcher matcher = pattern.matcher(inputStr);

		if (matcher.matches()) {
			return true;
		} else {
			return false;
		}
	}

	public boolean verifyInt(String str) {
		if (str.length() > 0) {
			for (char c : str.toCharArray()) {
				if (!Character.isDigit(c))
					return false;
			}
			return true;
		}
		return false;
	}

	public boolean verifyCreditCardNumber(String cardNumber) {
		if (cardNumber == null || cardNumber.trim().equalsIgnoreCase(""))
			return false;

		if (verifyString(cardNumber))
			return false;

		if (verifyInt(cardNumber) && cardNumber.length() == 16)
			return true;

		return false;
	}

	public boolean verifyFlightNumber(String flightNumber) {
		if (flightNumber == null || flightNumber.equalsIgnoreCase(""))
			return false;

		if (verifyString(flightNumber)) {
				return true;
		}

		return false;
	}

	public boolean validateUserName(String userName) {
		if (userName == null || userName.trim().equalsIgnoreCase(""))
			return false;
		Pattern pattern;
		Matcher matcher;
		String USERNAME_PATTERN = "^[a-z0-9_-]{3,15}$";
		pattern = Pattern.compile(USERNAME_PATTERN);
		matcher = pattern.matcher(userName);
		return matcher.matches();

	}

	public boolean validatePassportNumber(String passportNumber) {
		if (passportNumber == null
				|| passportNumber.trim().equalsIgnoreCase(""))
			return false;
		else
			return true;

	}

	public boolean verifyString(String string) {

		if (string == null || string.trim().equals(""))
			return false;

		if (string.matches("[a-zA-Z]*") || string.contains(" "))
			return true;
		else
			return false;

	}
	
	

	public boolean verifyEmail(String email) {
		String regex = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";
		email = email.trim();

		if (email == null || email.equals(""))
			return false;

		if (!email.matches(regex))
			return false;

		return true;
	}

	public boolean verifyZipCode(String zipCode) {

		if (zipCode == null || zipCode.equals("")) {
			return false;
		}
		String regex = "^\\d{5}(-\\d{4})?$";
		zipCode = zipCode.trim();

		if (zipCode.matches(regex)) {
			return true;
		}
		return false;
	}

	public boolean verifyContactNo(String contactNo) {

		contactNo = contactNo.trim();
		String regex = "^(?>\\(\\d{3}\\) ?|\\d{3}[.-]?)?\\d{3}[.-]?\\d{4}$";

		if (contactNo == null || contactNo.equals("")) {
			return false;
		}

		// Pattern pattern = Pattern.compile("\\d{3}-\\d{7}");
		if (contactNo.matches(regex)) {
			return true;
		}
		return false;
	}

	public String verifyFlightDate(Journey journey) throws ParseException {
		String error = "true";
		SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
		java.util.Date fDDate = sdf.parse(journey.getDepartureDate());
		java.util.Date fLDate = sdf.parse(journey.getArrivalDate());
		java.util.Date today = new java.util.Date();
		if (fDDate.before(today)) {
			error = "Please Select A Valid Flight Departure Date";
		}
		if (fLDate.before(today)) {
			error = "Please Select A Valid Flight Landing Date";
		}
		if (fLDate.before(fDDate)) {
			error = "Please Select Flight Landing Date After Departure Date";
		}
		if (fDDate.after(fLDate)) {
			error = "Please Select Flight Departure Date Before Landing Date";
		}

		return error;
	}

	public boolean verifyDateOfBirth(final String date) throws ParseException {
		if (date == null || date.equals("")) {
			return false;
		}
		Pattern pattern;
		Matcher matcher;

		final String DATE_VALIDATION_PATTERN = "(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-((19|20)\\d\\d)";
		pattern = Pattern.compile(DATE_VALIDATION_PATTERN);

		matcher = pattern.matcher(date);

		if (matcher.matches()) {

			matcher.reset();
			SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
			java.util.Date DOB = sdf.parse(date);
			java.util.Date today = new java.util.Date();
			if (matcher.find() && DOB.before(today)) {

				String mm = matcher.group(1);
				String dd = matcher.group(2);
				int yy = Integer.parseInt(matcher.group(3));

				if (dd.equals("31")
						&& (mm.equals("4") || mm.equals("6") || mm.equals("9")
								|| mm.equals("11") || mm.equals("04")
								|| mm.equals("06") || mm.equals("09"))) {
					return false;
				} else if (mm.equals("2") || mm.equals("02")) {

					if (yy % 4 == 0) {
						if (dd.equals("30") || dd.equals("31")) {
							return false;
						} else {
							return true;
						}
					} else {
						if (dd.equals("29") || dd.equals("30")
								|| dd.equals("31")) {
							return false;
						} else {
							return true;
						}
					}
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	// public boolean verifyDate(String dateToValidate, String dateFromat) {
	//
	// if (dateToValidate == null || dateToValidate.equals("")) {
	// return false;
	// }
	//
	// SimpleDateFormat sdf = new SimpleDateFormat(dateFromat);
	// sdf.setLenient(false);
	//
	// try {
	// Date date = sdf.parse(dateToValidate);
	// System.out.println(date);
	//
	// } catch (ParseException e) {
	// e.printStackTrace();
	// return false;
	// }
	//
	// return true;
	// }

	public static Traveller[] getCustomerDetails(String input) {
		StringTokenizer strTokenizer = new StringTokenizer(input, ":");
		String fname = null, lname = null, state = null, city = null, username = null;
		CustomerDAO CustomerDao = new CustomerDAO();
		Traveller[] customerList = null;
		while (strTokenizer.hasMoreTokens()) {
			String token = strTokenizer.nextToken();
			if (token.equals("fname")) {
				// System.out.println("fname = " + strTokenizer.nextToken());
				fname = strTokenizer.nextToken();
				customerList = CustomerDao.searchByName(fname);
			} else if (token.equals("lname")) {
				lname = strTokenizer.nextToken();
				customerList = CustomerDao.searchByLastName(lname);
			} else if (token.equals("state")) {

				state = strTokenizer.nextToken();
				customerList = CustomerDao.searchByState(state);
			} else if (token.equals("city")) {

				city = strTokenizer.nextToken();
				customerList = CustomerDao.searchByCity(city);
			} else if (token.equals("username")) {

				username = strTokenizer.nextToken();
				customerList = CustomerDao.viewProfile(username);
			}
		}

		return customerList;
	}

	public boolean isValidNoOfSeats(String seats) {
		if (seats == null || seats.trim().equalsIgnoreCase(""))
			return false;
		try {
			Integer.parseInt(seats);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public boolean isValidFare(String fare) {
		if (fare == null || fare.trim().equalsIgnoreCase(""))
			return false;
		try {
			Float.parseFloat(fare);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	
	public static void main(String[] args) {
		
		Validations v = new Validations()
		
		System.out.println(v.verifyEmail(""));
	}
	// public static String getCurrentDate() {
	// SimpleDateFormat sdfDate = new SimpleDateFormat("MM-dd-yyyy");//
	// dd/MM/yyyy
	// Date date = new Date();
	// String strDate = sdfDate.format(date);
	// return strDate;
	// }

}
